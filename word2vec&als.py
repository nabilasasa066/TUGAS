# -*- coding: utf-8 -*-
"""Word2Vec&ALS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jFH9gPYsvGAriDFPmo4QG4sVDkhlBqqz
"""

!pip install --upgrade --force-reinstall \
  numpy==1.26.4 \
  pandas==2.2.2 \
  scipy==1.11.4 \
  scikit-surprise==1.1.4 \
  gensim==4.3.3 \
  implicit==0.7.2

import os, re
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from gensim.models import Word2Vec
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse import coo_matrix
from implicit.als import AlternatingLeastSquares

from implicit.als import AlternatingLeastSquares

als_model = AlternatingLeastSquares(
    factors=50,
    regularization=0.1,
    iterations=20,
    use_gpu=False   # ⬅️ matikan GPU
)

from google.colab import drive
drive.mount('/content/drive')

DATA_PATH = "/content/drive/My Drive/Colab Notebooks/Word2Vec&ALS/Dataset/amazon.csv"
df = pd.read_csv(DATA_PATH)

print("Shape awal:", df.shape)
print("Kolom:", df.columns.tolist())
print(df.head(3))

# Cek missing value
print("\nMissing values:")
print(df.isnull().sum())

# Pastikan kolom about_product ada
if "about_product" not in df.columns:
    if "product_description" in df.columns:
        df["about_product"] = df["product_description"]
    else:
        df["about_product"] = df["product_name"]

# Bersihkan rating (contoh: "4.0 out of 5" → 4.0)
df["rating"] = df["rating"].astype(str).str.extract(r"(\d+(\.\d+)?)")[0]
df["rating"] = pd.to_numeric(df["rating"], errors="coerce")
df = df.dropna(subset=["about_product","rating"])
df["rating"] = df["rating"].astype(float)

print("Setelah cleaning:", df.shape)

# Distribusi rating
plt.figure(figsize=(8,4))
sns.countplot(x="rating", data=df, palette="coolwarm")
plt.title("Distribusi Rating Produk")
plt.show()

# Boxplot rating
plt.figure(figsize=(6,4))
sns.boxplot(x=df["rating"])
plt.title("Boxplot Rating")
plt.show()

def tokenize(text):
    return re.findall(r"\w+", str(text).lower())

df["tokens"] = df["about_product"].apply(tokenize)

# Latih Word2Vec
w2v = Word2Vec(sentences=df["tokens"].tolist(),
               vector_size=100, window=5, min_count=1,
               workers=4, seed=42)

# Buat vektor produk
def get_vector(tokens):
    vecs = [w2v.wv[w] for w in tokens if w in w2v.wv]
    return np.mean(vecs, axis=0) if vecs else np.zeros(w2v.vector_size)

df["vector"] = df["tokens"].apply(get_vector)
product_matrix = np.vstack(df["vector"].values)

# Fungsi rekomendasi content-based
def cb_recommend(product_name, top_k=5):
    if product_name not in df["product_name"].values:
        return []
    idx = df.index[df["product_name"]==product_name][0]
    sims = cosine_similarity([product_matrix[idx]], product_matrix)[0]
    order = sims.argsort()[::-1]
    order = [i for i in order if i != idx]
    return df.iloc[order[:top_k]][["product_name","rating"]]

# Contoh
sample = df["product_name"].iloc[0]
print("Rekomendasi CB untuk:", sample)
print(cb_recommend(sample, top_k=5))

# Encode user dan item
df["user_code"] = df["user_id"].astype("category").cat.codes
df["item_code"] = df["product_name"].astype("category").cat.codes

user_map = dict(enumerate(df["user_id"].astype("category").cat.categories))
item_map = dict(enumerate(df["product_name"].astype("category").cat.categories))
reverse_user_map = {v: k for k, v in user_map.items()}

# Matrix user-item
mat = coo_matrix(
    (df["rating"].astype(float), (df["user_code"], df["item_code"]))
)

# Latih model ALS
als = AlternatingLeastSquares(
    factors=50, regularization=0.1, iterations=20, use_gpu=False
)
als.fit(mat.T)

# Fungsi rekomendasi (robust, 1 fungsi saja)
def als_recommend(user_id, top_k=5):
    if user_id not in reverse_user_map:
        return []

    ucode = reverse_user_map[user_id]
    user_items = mat.tocsr()[ucode]

    recs = als.recommend(ucode, user_items, N=top_k)
    results = []

    # === Kasus 1: output tuple (ids, scores)
    if isinstance(recs, tuple) and len(recs) == 2:
        ids, scores = recs
        for i, s in zip(ids, scores):
            results.append((item_map[i], float(s)))

    # === Kasus 2: list of (id, score)
    else:
        for entry in recs:
            try:
                if hasattr(entry, "__len__") and len(entry) >= 2:
                    i, s = entry[0], entry[1]
                    results.append((item_map[i], float(s)))
                else:
                    results.append((item_map[int(entry)], None))
            except Exception:
                results.append((str(entry), None))

    return results

# Contoh rekomendasi
sample_user = df["user_id"].iloc[0]
print("Rekomendasi ALS untuk user:", sample_user)
print(als_recommend(sample_user, top_k=5))

top5 = df.groupby("product_name")["rating"].mean().sort_values(ascending=False).head(5)
low5 = df.groupby("product_name")["rating"].mean().sort_values(ascending=True).head(5)

print("Top-5 produk:\n", top5)
print("Bottom-5 produk:\n", low5)

plt.figure(figsize=(10,5))
sns.barplot(x=top5.index, y=top5.values, palette="Greens_r")
plt.title("Top 5 Produk")
plt.xticks(rotation=45, ha="right")
plt.show()

